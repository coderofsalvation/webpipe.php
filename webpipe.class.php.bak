<?php

/**
 * WebPipe client interface.
 *
 * @package  WebPipe
 * @author   Matthew Hudson <matt@matthewghudson.com>
 * @license  http://creativecommons.org/licenses/MIT/ MIT
 * @link     http://github.com/matthewhudson/webpipe.php/
 */
class WebPipe {
	
	// HTTP UserAgent.
	private $_userAgent = "WebPipe-PHP/0.2.0";
	
	/**
	 * Returns a WebPipe's Block Definition. 
	 * It's handy while debugging and/or learning about new webpipes.
	 *
	 * @param string $block Name or URL of the WebPipe to call.
	 * @return string 
	 */
	public function options($block) {
		if ($this->_isURL($block)) {
			$response = $this->_request("options", $block);
		} else {
			$registryURL = "http://registry.webpipes.org/blocks/$name";
			$response = $this->_request("options", $registryURL);
		}
		
		return $response;
	}

	/**
	 * Make a request to a WebPipe Block.
	 *
	 * @param string $block Name or URL of the Block to call.
	 * @param array $input Any Input to send to the Block.
	 * @return string
	 */
	public function execute($block, $input = array()) {
		if ($this->_isURL($block)) {
			$response = $this->_request("post", $block, $input);
		} else {
			$registryURL = "http://registry.webpipes.org/blocks/$name";
			$response = $this->_request("options", $registryURL);
		}
		
		$dispatchURL = "http://dispatch.{$this->_hostname}/$name";
		
		$response = $this->_request("post", $dispatchURL, $data);
		
		return $response;
	}

	/**
	 * Make a HTTP request.
	 *
	 * @param string $method Expecting POST|GET.
	 * @param string $url The URL to request.
	 * @param array $data Any data to send along.
	 * @return string|bool False on fail, or response body string on success.
	 */	
	private function _request($method, $url, $data = array()) {
		
		// Create a new cURL resource
		$curl = curl_init();
		
		// Set URL and other appropriate options
		curl_setopt($curl, CURLOPT_URL, $url);
		
		// Don't include the header in the output.
		curl_setopt($curl, CURLOPT_HEADER, false);

		// Set the UserAgent Header
		curl_setopt($curl, CURLOPT_USERAGENT, $this->_userAgent);

		// Return the response instead of outputting.
		curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
		
		// Force the connection to close when it has finished processing
		curl_setopt($curl, CURLOPT_FORBID_REUSE, true);

		// Force the use of a new connection instead of a cached one.
		curl_setopt($curl, CURLOPT_FRESH_CONNECT, true);

		// Follow redirects
		curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);
		
		// Set Method: If POST request, set it up + add data.
		if (strtolower($method) === "post") {
		
			// Regular HTTP POST: application/x-www-form-urlencoded
			curl_setopt($curl, CURLOPT_POST, true);
		
			// The full data to post in a HTTP "POST" operation.
			if (sizeof($data)) {
				curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
			}
		} else {
			curl_setopt($curl, CURLOPT_CUSTOMREQUEST, "options");
		}
	
		// Execute the HTTP request.
		$response = curl_exec($curl);
		
		// Get response status code.
		$status = curl_getinfo($curl, CURLINFO_HTTP_CODE); 
		
		// Close cURL resource, and free up system resources
		curl_close($curl);
		
		// Ensure HTTP Status Code is '2xx Success'
		if (!($status >= 200) || !($status < 300)) {
			return false;
		}
		
		return $response;
	}
	
	private function _isURL($url) {
		return (filter_var($url, FILTER_VALIDATE_URL)) ? true : false;
	}
}
?>